name: Main

on:
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(wget,aria2c,curl,axel)'
         required: true
         default: 'aria2c'
       filename:
         description: 'ROM NAME'
         required: false
       filelink:
         description: 'ROM LINK'
         required: true
       artifact:
         description: 'Upload to Artifact'
         required: true
         default: 'true'
       release:
         description: 'Upload to Release'
         required: true
         default: 'true'

jobs:
  Main:
    runs-on: ubuntu-18.04
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel
          pip3 install protobuf
          pip install brotli

      - id: var
        name: Download
        run: |
          echo "Download"
          if [[ ! -z "${{ github.event.inputs.filename }}" ]]; then
              NAME="${{ github.event.inputs.filename }}"
              if [[ ! -z "$(echo ${NAME} | grep ".zip")" ]]; then
                  echo "::set-output name=filename::${NAME%.*}"
                  echo "${{ github.event.inputs.filename }}"
                  filename="${NAME%.*}"
              else
                  echo "::set-output name=filename::${{ github.event.inputs.filename }}"
                  echo "Null value"
                  filename="${{ github.event.inputs.filename }}"
              fi
              echo "filename: $filename"
              if [[ "${{ github.event.inputs.mode }}" == 'wget' ]]; then
                  wget ${{ github.event.inputs.filelink }} -O "${filename}.zip"
              elif [[ "${{ github.event.inputs.mode }}" == 'aria2c' ]]; then
                  aria2c -x16 -j$(nproc) ${{ github.event.inputs.filelink }} -o "${filename}.zip"             
              elif [[ "${{ github.event.inputs.mode }}" == 'curl' ]]; then
                  curl -L ${{ github.event.inputs.filelink }} -o "${filename}.zip"
              elif [[ "${{ github.event.inputs.mode }}" == 'axel' ]]; then
                  axel -n 16 ${{ github.event.inputs.filelink }} -o "${filename}.zip"
              fi             
          else
              if [[ "${{ github.event.inputs.mode }}" == 'wget' ]]; then
                  wget --content-disposition -c ${{ github.event.inputs.filelink }}
              elif [[ "${{ github.event.inputs.mode }}" == 'aria2c' ]]; then
                  aria2c -x16 -j$(nproc) ${{ github.event.inputs.filelink }}             
              elif [[ "${{ github.event.inputs.mode }}" == 'curl' ]]; then
                  curl -OL ${{ github.event.inputs.filelink }}
              elif [[ "${{ github.event.inputs.mode }}" == 'axel' ]]; then
                  axel -n 16 ${{ github.event.inputs.filelink }}
              fi
              NAME="$(ls -lS *.zip | head -1 | awk '{print $9}')"
              if [ ! -z "$NAME" ]; then
                  filename=${NAME%.*}
              else
                  tmp="$(find . -maxdepth 1 -type f -size +500M)"
                  if [ ! -z "$tmp" ]; then
                      ls -al
                      echo "Rename"
                      filename=$(echo $tmp | sed 's#./##')
                      mv $filename ${filename}.zip
                  else
                      echo "Download error"
                      exit 1
                  fi
              fi              
              echo "::set-output name=filename::$filename"
          fi
          ls -al

      - name: Payload Extractor
        run: |
          echo "Payload Dumper"
          unzip ${{ steps.var.outputs.filename }}.zip payload.bin
          rm -rf ${{ steps.var.outputs.filename }}.zip
          python3 update-payload-extractor/extract.py payload.bin --output_dir ./output/
          cd output
          ls -al
          cd ..

      - name: Patching Fstab
        run: |
          mkdir vendor/
          sudo mount output/vendor.img vendor/
          fstab="vendor/etc/fstab.qcom"
          sudo sed -i 's/,slotselect//g' $fstab
          sudo sed -i 's/,verify//g' $fstab
          sudo sed -i 's/,avb//g' $fstab
          sudo sed -i 's/forceencrypt/encryptable/g' $fstab
          sudo sed -i 's/fileencryption=ice/encryptable=footer/g' $fstab
          sudo cp vendor/etc/fstab.qcom output/fstab.qcom
          sudo umount vendor
          sudo rm -rf vendor
    
      - name: Mkbootimg
        run: |
          echo "mkbooting"
          mv output/boot.img mkbootimg/
          cd mkbootimg
          ./mkboot boot.img boot
          rm boot.img
          cd boot
          sed -i '/vbmeta/d' img_info
          ls -al
          cd ..
          ./mkboot boot boot.img
          ls -al
          mv *.img ../output/
          cd ..

      - name: Mkdtimg
        run: |
          echo "mkdting"
          mv output/dtbo.img dtbo2dts/
          cd dtbo2dts
          python dtbo2dtsi.py
          rm dtbo.img
          ls -al
          dts=dts*.*
          echo $dts
          sed -i '/parts/{n;d;}' $dts
          sed -i '/parts/{n;d;}' $dts
          sed -i '/vbmeta/d' $dts
          sed -i '/android,vbmeta/d' $dts
          sed -i '/parts/d' $dts
          sed -i 's/,slotselect//g' $dts
          sed -i 's/,avb//g' $dts
          cp $dts ../output/
          python dtsi2dtbo.py
          ls -al
          cp dtbo_new.img ../output/dtbo.img
          cd ../../
         
      - name: img2sdat && brotli
        run: |
          pip install brotli
          mv output/boot.img template/
          mv output/system.img template/
          mv output/vendor.img template/
          mv output/dtbo.img template/
          ls -al
          echo "--------------------------------------------"
          mv template ${{ steps.var.outputs.filename }}
          cd ${{ steps.var.outputs.filename }}
          zip -q -r -9 ${{ steps.var.outputs.filename }}.zip *
          cd ..
          mv ${{ steps.var.outputs.filename }}/${{ steps.var.outputs.filename }}.zip ./
          ls -al

      - name: Upload to Artifact(Source file)
        if: github.event.inputs.artifact == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: |
            output
          retention-days: 7

      - name: Upload to Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.var.outputs.filename }}.zip
          name: ${{ steps.var.outputs.filename }}
          tag_name: ${{ github.run_id }}
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}
